-- MySQL Script generated by MySQL Workbench
-- Thu Feb 13 19:05:13 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema privateevents
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema privateevents
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `privateevents` DEFAULT CHARACTER SET utf8mb3 ;
USE `privateevents` ;

-- -----------------------------------------------------
-- Table `privateevents`.`organizer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `privateevents`.`organizer` (
  `Username` VARCHAR(10) NOT NULL,
  `Password` VARCHAR(150) NOT NULL,
  `Email` VARCHAR(45) NOT NULL,
  `LastName` VARCHAR(45) NOT NULL,
  `FirstName` VARCHAR(45) NOT NULL,
  `InfoPayPal` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`Username`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

CREATE UNIQUE INDEX `unique_cf_mail` ON `privateevents`.`organizer` (`Email` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `privateevents`.`event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `privateevents`.`event` (
  `IdEvent` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `City` VARCHAR(45) NOT NULL,
  `Desc` VARCHAR(1000) NULL DEFAULT NULL,
  `Location` VARCHAR(45) NOT NULL,
  `Address` VARCHAR(45) NOT NULL,
  `Date` DATE NOT NULL,
  `Time` TIME NOT NULL,
  `BookingClosed` TINYINT NOT NULL,
  `Organizer` VARCHAR(16) NOT NULL,
  PRIMARY KEY (`IdEvent`),
  CONSTRAINT `org`
    FOREIGN KEY (`Organizer`)
    REFERENCES `privateevents`.`organizer` (`Username`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 10
DEFAULT CHARACTER SET = utf8mb3;

CREATE UNIQUE INDEX `unique_event` ON `privateevents`.`event` (`City` ASC, `Name` ASC) VISIBLE;

CREATE INDEX `org_idx` ON `privateevents`.`event` (`Organizer` ASC) INVISIBLE;

CREATE INDEX `research_index` ON `privateevents`.`event` (`City` ASC, `Name` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `privateevents`.`ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `privateevents`.`ticket` (
  `TypeName` VARCHAR(45) NOT NULL,
  `Event` INT NOT NULL,
  `Price` DOUBLE NOT NULL,
  `MinimumAge` SMALLINT NULL DEFAULT NULL,
  `Desc` VARCHAR(25) NOT NULL,
  `MaxTickets` INT NOT NULL,
  PRIMARY KEY (`TypeName`, `Event`),
  CONSTRAINT `eventTicket`
    FOREIGN KEY (`Event`)
    REFERENCES `privateevents`.`event` (`IdEvent`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

CREATE INDEX `eventTicket_idx` ON `privateevents`.`ticket` (`Event` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `privateevents`.`booking`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `privateevents`.`booking` (
  `CodeBooking` VARCHAR(10) NOT NULL,
  `Event` INT NOT NULL,
  `LastName` VARCHAR(45) NOT NULL,
  `FirstName` VARCHAR(45) NOT NULL,
  `Age` SMALLINT NOT NULL,
  `Email` VARCHAR(45) NOT NULL,
  `Telephone` VARCHAR(15) NOT NULL,
  `Gender` CHAR(1) NULL DEFAULT NULL,
  `TicketType` VARCHAR(45) NOT NULL,
  `OnlinePayment` TINYINT NOT NULL,
  PRIMARY KEY (`CodeBooking`, `Event`),
  CONSTRAINT `eventId`
    FOREIGN KEY (`Event`)
    REFERENCES `privateevents`.`event` (`IdEvent`),
  CONSTRAINT `ticketType`
    FOREIGN KEY (`TicketType`)
    REFERENCES `privateevents`.`ticket` (`TypeName`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

CREATE UNIQUE INDEX `email_unique` ON `privateevents`.`booking` (`Event` ASC, `Email` ASC) INVISIBLE;

CREATE UNIQUE INDEX `tele_unique` ON `privateevents`.`booking` (`Event` ASC, `Telephone` ASC) VISIBLE;

CREATE UNIQUE INDEX `code_unique` ON `privateevents`.`booking` (`Event` ASC, `CodeBooking` ASC) VISIBLE;

CREATE INDEX `ticketType_idx` ON `privateevents`.`booking` (`TicketType` ASC) VISIBLE;

CREATE INDEX `eventId_idx` ON `privateevents`.`booking` (`Event` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `privateevents`.`notif`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `privateevents`.`notif` (
  `idNotif` INT NOT NULL AUTO_INCREMENT,
  `DateTime` TIMESTAMP NOT NULL,
  `BookingCode` VARCHAR(10) NOT NULL,
  `EventName` VARCHAR(45) NOT NULL,
  `Type` ENUM('DELETE', 'NEW', 'MODIFY') NOT NULL,
  `Organizer` VARCHAR(16) NOT NULL,
  PRIMARY KEY (`idNotif`),
  CONSTRAINT `orgNotif`
    FOREIGN KEY (`Organizer`)
    REFERENCES `privateevents`.`organizer` (`Username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 77
DEFAULT CHARACTER SET = utf8mb3;

CREATE UNIQUE INDEX `unique_notif` ON `privateevents`.`notif` (`Organizer` ASC, `EventName` ASC, `BookingCode` ASC, `DateTime` ASC) INVISIBLE;

CREATE INDEX `org_idx` ON `privateevents`.`notif` (`Organizer` ASC) VISIBLE;

USE `privateevents`;

DELIMITER $$
USE `privateevents`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `privateevents`.`max_tickets_check`
AFTER INSERT ON `privateevents`.`booking`
FOR EACH ROW
begin
    declare var_bookings int;
    declare var_max_tickets int;

    select count(*)
    into var_bookings
    from Booking
    where Event=NEW.Event and TicketType=New.TicketType;

    select MaxTickets
    into var_max_tickets
    from Ticket
    where Event=NEW.Event and TypeName=New.TicketType;

    if (var_max_tickets - var_bookings) < 0 then
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Tickets sold out.';
    end if;
end$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
